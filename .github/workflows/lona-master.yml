name: Lona Production

on:
  push:
    branches:
      - master

jobs:
  sketch-library:
    runs-on: macos-latest
    steps:
      - name: Get the latest version of the repository
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Install the Lona Compiler
        run: npm install lonac @lona/workspace-to-sketch-library

      - name: Generate the Sketch library
        run: 'node -e "require(''@lona/workspace-to-sketch-library'').default(process.cwd(), ''.__lona-artifact-path/sketch-library.sketch'', { logFunction: console.log.bind(console) }).catch(err => { console.log(err); process.exit(1); })"'

      - name: Pass the library to other actions
        uses: actions/upload-artifact@v1
        with:
          name: sketch-library
          path: .__lona-artifact-path

  documentation:
    runs-on: ubuntu-latest
    needs: [sketch-library]
    steps:
      - name: Get the latest version of the repository
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Bump the workspace version
        id: tag_version
        uses: mathieudutour/github-tag-action@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Check if Lona is enabled on this repo
        id: lona
        uses: Lona/lona-github-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_succeeded: ${{ job.status == 'Success' }}
          ref_name: refs/tags/${{ steps.tag_version.outputs.new_tag || steps.tag_version.outputs.previous_tag }}
          lona_api_base_url: https://api.lona.design/dev

      - name: Install the Lona Compiler
        run: npm install -g @lona/compiler

      - name: Generate the documentation website
        uses: Lona/lona-docs-github-action@v1
        with:
          output_folder: ${{ steps.lona.outputs.output_folder }}
          path_prefix: __lona-docs__/secret/prefix
          version: ${{ steps.tag_version.outputs.new_version }}
          base_url: __lona-docs__/secret/base-url

      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          draft: "false"
          prerelease: "false"

      - name: Publish the design tokens to the release
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.lona.outputs.output_folder }}/flat-tokens.json
          asset_name: tokens.json
          asset_content_type: application/json

      - name: Get the Sketch library from previous action
        uses: actions/download-artifact@v1
        with:
          name: sketch-library
          path: .__lona-artifact-path

      - name: Move the Sketch library to upload it
        run: mv .__lona-artifact-path/sketch-library.sketch ${{ steps.lona.outputs.output_folder }}/library.sketch

      - name: Publish the Sketch Library to the GitHub release
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.lona.outputs.output_folder }}/library.sketch
          asset_name: library.sketch
          asset_content_type: application/zip

      - name: Pass variables to other actions (1/2)
        run: |
          mkdir -p .__lona-variables-path
          echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}
          ::set-output name=new_version::${{ steps.tag_version.outputs.new_version }}
          ::set-output name=new_tag::${{ steps.tag_version.outputs.new_tag }}
          " > .__lona-variables-path/variables.txt
      - name: Pass variables to other actions (2/2)
        uses: actions/upload-artifact@v1
        with:
          name: lona-variables
          path: .__lona-variables-path

  npm-package:
    runs-on: ubuntu-latest
    needs: [documentation]
    steps:
      - name: Get variables from documentation (1/2)
        uses: actions/download-artifact@v1
        with:
          name: lona-variables
          path: .__lona-variables-path
      - name: Get variables from documentation (2/2)
        run: |
          while read p; do
            echo "$p"
          done <.__lona-variables-path/variables.txt
        id: variables

      - name: Get the latest version of the repository
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Install the Lona Compiler
        run: npm install -g @lona/compiler

      - name: Generate js sources
        run: lona convert . --format=js --output=./__lona-npm-output

      - name: Generate package.json
        run: |
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "{
            \"name\": \"@$REPO_LOWERCASE\",
            \"version\": \"${{ steps.variables.outputs.new_version }}\",
            \"publishConfig\": { \"registry\": \"https://npm.pkg.github.com/\" },
            \"repository\": \"git://github.com/${{ github.repository }}\"
          }" >> package.json
        working-directory: ./__lona-npm-output

      - name: Publish package to GitHub Package Registry
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          npm publish
        working-directory: ./__lona-npm-output
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cocoapod:
    runs-on: macos-latest
    needs: [documentation]
    steps:
      - name: Get variables from documentation (1/2)
        uses: actions/download-artifact@v1
        with:
          name: lona-variables
          path: .__lona-variables-path
      - name: Get variables from documentation (2/2)
        run: |
          while read p; do
            echo "$p"
          done <.__lona-variables-path/variables.txt
          echo "::set-output name=repo_name::$(echo "${{ github.repository }}" | tr '/' '_')"
        id: variables

      - name: Get the latest version of the repository
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Install the Lona Compiler
        run: npm install -g @lona/compiler

      - name: Generate Swift sources
        run: |
          lona convert . --format=swift --output=./.lona-pod/Sources

      - name: Create Package.swift
        run: |
          echo "name: '${{ steps.variables.outputs.repo_name }}'

          ############
          # Options
          ############

          options:
            minimumXcodeGenVersion: 2.10
            groupSortPosition: top
            generateEmptyDirectories: true
            deploymentTarget:
              iOS: '11.0'
              macOS: '10.14'

          ############
          # Targets
          ############

          targets:
            '${{ steps.variables.outputs.repo_name }}':
              type: framework
              platform: [iOS, macOS]

              # scheme
              scheme:
                gatherCoverageData: true

              # sources
              sources:
                - Sources
          " >> project.yml
        working-directory: ./.lona-pod

      - name: Generate Xcode Project
        run: xcodegen
        working-directory: ./.lona-pod

      - name: Archive the framework
        run: |
          mkdir -p .__lona-build-output
          carthage build --archive --log-path ./.__lona-build-output/carthage-xcodebuild.log
        working-directory: ./.lona-pod

      - name: Upload build output if it failed
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: lona-xcode-build-output
          path: ./.lona-pod/.__lona-build-output

      - name: Publish the framework to the GitHub release
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.variables.outputs.upload_url }}
          asset_path: ./.lona-pod/${{ steps.variables.outputs.repo_name }}.framework.zip
          asset_name: ${{ steps.variables.outputs.repo_name }}.framework.zip
          asset_content_type: application/zip
